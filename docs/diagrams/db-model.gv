digraph g {
  rankdir=LR
  node[shape=record];
  style=dashed;

  subgraph cluster_legend {
    label="Legend"

    storage;
    channels[style=filled,fillcolor="#bbffff"];
    coordination[style=filled,fillcolor="#ffbbbb"]
    bridge_engine[style=filled,fillcolor="#bbbbff"];
    service_registry[style=filled,fillcolor="#bbffbb"]
    templates[style=filled,fillcolor="#ffbbff"]
  }


  subgraph group_core_channels {
    label="Channels";
    node[style=filled,fillcolor="#bbffff"];

    // LIVE_CHANNELS_TABLE | automate_channel_engine_live_channels_table
    live_channels_table_entry[label="*Channel* | <pk> id | stats"];

    // LISTENERS_TABLE | automate_channel_engine_listeners_table
    listeners_table_entry[label="*Listener*| <f0> channel_id | pid | node | key | subkey"];
    listeners_table_entry -> live_channels_table_entry:pk;

    // MONITORS_TABLE | automate_channel_engine_monitors_table
    monitors_table_entry[label="*Monitor* | <f0> live_channel_id | pid | node"];
    monitors_table_entry:f0 -> live_channels_table_entry:pk;
  }

  subgraph group_core_storage {
    label="Storage";

    // REGISTERED_USERS_TABLE | automate_registered_users
    registered_user_entry[label="*Registered user* | <pk> id | username | password | email | status | registration_time | is_admin | is_advanced | is_in_preview"];

    // User group
    user_group[
      color="green",
      label="*User group* | <pk> id | name | canonical_name | public"]

    // User in group
    user_in_group[color=green,
      label="*User in group* | <f0> group_id | <f1> user_id | role"]
    user_in_group:f0 -> user_group:pk
    user_in_group:f1 -> registered_user_entry:pk[style=bold,color="#ff0000"];

    // User in group invitation
    user_in_group_invitation[color=green, 
      label="*User in group invitation* | <f0> group_id | <f1> user_id | role"]
    user_in_group_invitation:f0 -> user_group:pk
    user_in_group_invitation:f1 -> registered_user_entry:pk[style=bold,color="#ff0000"];

    // User or group
    owner[color=green,style=dashed,
      label="*Owner* | <pk> id | type (user/group) | <f1> user_id / group_id"]
    owner:f1 -> user_group:pk
    owner:f1 -> registered_user_entry:pk[style=bold,color="#ff0000"];

    // USER_SESSIONS_TABLE | automate_user_sessions
    user_session_entry[style=dashed, // Maybe a permisisons-based model would be interesting
      label="*User session* | <pk> session_id | <f0> user_id | session_start_time | session_last_used_time"];
    user_session_entry:f0 -> registered_user_entry:pk[style=dashed,color="#ff0000"];

    // // USER_MONITORS_TABLE | automate_user_monitors
    monitor_entry[color=red, // Deprecated
                  label="*Monitor entry* [Dep] | <pk> id | <f0> owner | type | name | value"];
    monitor_entry:f0 -> owner:pk[style=normal,color="#0000ff"];

    // USER_PROGRAMS_TABLE | automate_user_programs
    user_program_entry[label="*Program* | <pk> id | <f0> owner | program_name | program_type | program_parsed | program_orig | enabled | <f1> program_channel | creation_time | last_upload_time | last_successful_call_time | last_failed_call_time"];
    user_program_entry:f0 -> owner:pk[style=normal,color="#0000ff"];
    user_program_entry:f1 -> live_channels_table_entry:pk;

    // USER_PROGRAMS_LOGS_TABLE | automate_user_program_logs
    user_program_log_entry[label="*Log line* | <f0> program_id | <f1> thread_id | <f2> owner | block_id | event_data | event_message | event_time | severity | exception_data"];
    user_program_log_entry:f0 -> user_program_entry:pk;
    user_program_log_entry:f2 -> owner:pk[style=normal,color="#0000ff"];

    // USER_GENERATED_LOGS_TABLE | automate_user_generated_logs
    user_generated_log_entry[label="*User generated log* | <f0> program_id | block_id | severity | event_time | event_message"]
    user_generated_log_entry:f0 -> user_program_entry:pk;

    // USER_PROGRAM_EVENTS_TABLE | automate_user_program_events
    user_program_editor_event[label="*User editor event* | <f0> program_id | event | event_tag"]
    user_program_editor_event:f0 -> user_program_entry:pk;

    // USER_PROGRAM_CHECKPOINTS_TABLE | automate_user_program_checkpoints
    user_program_checkpoint[label="*Program checkpoint* | <f0> program_id | <f1> user_id | event_time | content"]
    user_program_checkpoint:f0 -> user_program_entry:pk;
    user_program_checkpoint:f1 -> registered_user_entry:pk[style=bold,color="#ff0000"];

    // PROGRAM_TAGS_TABLE | automate_program_tags
    program_tags_entry[label="*Program tags* | <f0> program_id | tags"];
    program_tags_entry:f0 -> user_program_entry:pk;

    // RUNNING_PROGRAMS_TABLE | automate_running_programs
    running_program_entry[label="*Running program*| <f0> program_id | runner_pid | variables | stats"];
    running_program_entry:f0 -> user_program_entry:pk;

    // RUNNING_THREADS_TABLE | automate_running_program_threads
    running_program_thread_entry[label="*Program thread* | <pk> thread_id | runner_pid | <f0> parent_program_id | instructions | memory | instruction_memory | position | stats"];
    user_program_logs_entry:f1 -> running_program_thread_entry:pk;
    running_program_thread_entry:f0 -> user_program_entry:pk;

    // PROGRAM_VARIABLE_TABLE | automate_program_variable_table
    program_variable_table_entry[label="*Program variable* | {<f0> program_id | var_name} | value"];
    program_variable_table_entry:f0 -> user_program_entry:pk;  // Not sure if user program or running program

    // CUSTOM_SIGNALS_TABLE | automate_custom_signals_table
    custom_signal_entry[label="*Custom signal* | <pk> id | name | <f0> owner"];
    custom_signal_entry:f0 -> owner:pk[style=normal,color="#0000ff"];

    // INSTALLATION_CONFIGURATION_TABLE | automate_installation_configuration
    storage_configuration_entry[label="*Installation configuration* | <pk> id | value"];

    // USER_VERIFICATION_TABLE | automate_user_verification_table
    user_verification_entry[label="*User verification* | <pk> id | <f0> user_id | verification_type"]
    user_verification_entry:f0 -> registered_user_entry:pk[style=bold,color="#ff0000"];
  }

  subgraph group_coordination {
    label="Coordination";
    node[style=filled,fillcolor="#ffbbbb"];

    // RUN_ONCE_TASKS_TABLE | automate_coordination_run_once_tasks
    run_once_tasks_table_entry[label="*Run once tasks* | <pk> task_id | node | pid"]
  }

  subgraph group_registry_services {
    label="Service registry";
    node[style=filled,fillcolor="#bbffbb"]

    // SERVICE_REGISTRY_TABLE | automate_service_registry_services_table
    services_table_entry[label="*Service* | <pk> id | public? | name | description | module"];

    // USER_SERVICE_ALLOWANCE_TABLE | automate_service_registry_user_service_allowance_table
    user_service_allowance_entry[label="*Allowed service*| <f0> service_id | <f1> user_id"];
    user_service_allowance_entry:f0 -> services_table_entry:pk;
    user_service_allowance_entry:f1 -> owner:pk[style=normal,color="#0000ff"];

    // SERVICE_CONFIGURATION_TABLE | automate_service_registry_service_configuration_table
    service_configuration_entry[label="*Service configuration* | { <f0> service_id | key } | value "];
    service_configuration_entry:f0 -> services_table_entry:pk;
  }

  subgraph group_bridges {
    label="Bridge engine";

    node[style=filled,fillcolor="#bbbbff"]

    // SERVICE_PORT_TABLE | automate_service_port_table
    service_port_entry[label="*Bridge* | <pk> id | name | <f0> owner | <f1> service_id"]
    service_port_entry:f0 -> owner:pk[style=normal,color="#0000ff"];
    service_port_entry:f1 -> services_table_entry:pk;

    // SERVICE_PORT_CONFIGURATION_TABLE | automate_service_port_configuration_table
    service_port_configuration[label="*Bridge config* | <pk> id | service_name | <f0> service_id | is_public | blocks | icon | allow_multiple_connections"]
    service_port_configuration:pk -> service_port_entry:pk;
    service_port_configuration:f0 -> services_table_entry:pk


    // SERVICE_PORT_CHANNEL_TABLE | automate_service_port_channel_table
    service_port_monitor_channel_entry[label="*Bridge channel* | { <f0> owner | <f1> bridge_id } | <f2> channel_id"]
    service_port_monitor_channel_entry:f0 -> owner:pk[style=normal,color="#0000ff"];
    service_port_monitor_channel_entry:f1 -> service_port_entry:pk;
    service_port_monitor_channel_entry:f2 -> live_channels_table_entry:pk;

    // SERVICE_PORT_CHANNEL_MONITORS_TABLE | automate_service_port_channel_monitors_table
    channel_monitor_table_entry[label="*Monitor table* | {<f0> bridge_id} | pid | node"]
    channel_monitor_table_entry:f0 -> service_port_entry:pk

    // USER_TO_BRIDGE_CONNECTION_TABLE | automate_service_port_channel_user_to_bridge_connection_table    // Bridge connection
    user_to_bridge_connection_entry[
                     label="*Connection* | <pk> id | <f0> bridge_id | <f1> user_id | <f2> channel_id | name | creation_time"]
    user_to_bridge_connection_entry:f0 -> service_port_entry:pk
    user_to_bridge_connection_entry:f1 -> owner:pk[style=normal,color="#0000ff"];
    user_to_bridge_connection_entry:f2 -> live_channels_table_entry:pk
    // Connection data might store data from the bridges

    pending_connection_entry[label="*Pending connection* | <pk> id | <f0> bridge_id | <f1> owner | <f2> channel_id | creation_time"]
    pending_connection_entry:f0 -> service_port_entry:pk
    pending_connection_entry:f1 -> owner:pk[style=normal,color="#0000ff"];
    pending_connection_entry:f2 -> live_channels_table_entry:pk


  }

  subgraph group_core_template_engine {
    label="Template engine"
    node[style=filled,fillcolor="#ffbbff"]

    // TEMPLATE_TABLE | automate_template_engine_templates_table
    template_entry[label="*Template* | <pk> id | name | <f0> owner | content"]
    template_entry:f0 -> owner:pk[style=normal,color="#0000ff"];

  }
}
