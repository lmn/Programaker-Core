digraph g {
    rankdir=LR
    node[shape=record];

    subgraph cluster_core {
        label="Core";

        subgraph cluster_core_storage {
            label="Storage";

            // REGISTERED_USERS_TABLE | automate_registered_users
            registered_user_entry[label="*Registered user* | <pk> id | username | password | email"];

            // USER_SESSIONS_TABLE | automate_user_sessions
            user_session_entry[label="*User session* | <pk> session_id | <f0> user_id | session_start_time"];

            user_session_entry:f0 -> registered_user_entry:pk;

            // USER_MONITORS_TABLE | automate_user_monitors
            monitor_entry[label="*Monitor entry* | <pk> id | <f0> user_id | type | name | value"];

            monitor_entry:f0 -> registered_user_entry:pk;

            // USER_PROGRAMS_TABLE | automate_user_programs
            user_program_entry[label="*Program* | <pk> id | <f0> user_id | program_name | program_type | program_parsed | program_orig"];
            user_program_entry:f0 -> registered_user_entry:pk;

            // RUNNING_PROGRAMS_TABLE | automate_running_programs
            running_program_entry[label="*Running program*| <f0> program_id | runner_pid | variables | stats"];
            running_program_entry:f0 -> user_program_entry:pk;

            // REGISTERED_SERVICES_TABLE | automate_registered_services
            registered_service_entry[label="*Service registration* | <pk> registration_id | <f0> service |  <f1> user_id | enabled"];
            registered_service_entry:f1 -> registered_user_entry:pk;

            // PROGRAM_VARIABLE_TABLE | automate_program_variable_table
            program_variable_table_entry[label="*Program variable* | <f0> program_id + var_name | value"];
            program_variable_table_entry:f0 -> user_program_entry:pk;  // Not sure if user program or running program
        }

        subgraph cluster_core_channels {
            label="Channels";

            // LIVE_CHANNELS_TABLE | automate_channel_engine_live_channels_table
            live_channels_table_entry[label="*Channel* | <pk> id | stats"];

            // LISTENERS_TABLE | automate_channel_engine_listeners_table
            listeners_table_entry[label="*Listener*| <f0> channel_id | pid"];
            listeners_table_entry -> live_channels_table_entry:pk;
        }

        subgraph cluster_core_chats {
            label="Chats";

            // CHAT_HANDLER_MODULE_TABLE | automate_chat_handler_module_table
            chat_handler_module_entry[label="*Chat* | <pk> prefix_id | handler_module"];
        }

        subgraph cluster_core_services {
            label="Services";

            // SERVICE_REGISTRY_TABLE | automate_service_registry_services_table
            services_table_entry[label="*Service* | <pk> id | public? | name | description | module"];

            // USER_SERVICE_ALLOWANCE_TABLE | automate_service_registry_user_service_allowance_table
            user_service_allowance_entry[label="*Allowed service*| <f0> service_id | <f1> user_id"];
            user_service_allowance_entry:f0 -> services_table_entry:pk;
            user_service_allowance_entry:f1 -> registered_user_entry:pk;

            // SERVICE_CONFIGURATION_TABLE | automate_service_registry_service_configuration_table
            service_configuration_entry[label="*Service configuration* | <pk> service_id + key | value "];
            service_configuration_entry:pk -> services_table_entry:pk;
        }

        subgraph cluster_core_user_service_registration {
            label="User registration in service";

            // SERVICE_REGISTRATION_TOKEN_TABLE | automate_service_registration_token_table
            service_registration_token[label="*Registration session* | <pk> token | <f0> service_id | <f1> user_id"];
            service_registration_token:f0 -> services_table_entry:pk;
            service_registration_token:f1 -> registered_user_entry:pk;
        }
   }
}