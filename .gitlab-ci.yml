image: docker:19.03.5-dind

stages:
  - test
  - build
  - push-commit
  - push-branch  # To avoid duplicating the upload do it sequentially

variables:
  DOCKER_IMAGE_FRONTEND: plaza-core-frontend
  DOCKER_IMAGE_BACKEND: plaza-core-backend
  DOCKER_IMAGE_BACKEND_OPTIMIZED: plaza-core-backend-optimized

services:
  - docker:19.03.5-dind

## Frontend
test-frontend-logic:
  stage: test
  before_script:
    - cd frontend
  script:
    - docker build --target builder --build-arg BUILD_COMMAND=test-logic -f scripts/ci-partial.dockerfile .

build-prod-frontend:
  stage: build
  before_script:
    - mkdir -p tmp_docker_images/ || true
    - cd frontend
  artifacts:
    paths:
      - tmp_docker_images/
    expire_in: 24h # No need to keep it around
  script:
    - docker build -t $DOCKER_IMAGE_FRONTEND -f scripts/ci-partial.dockerfile .
    - docker save $DOCKER_IMAGE_FRONTEND -o ../tmp_docker_images/frontend.tar

push-frontend:
  stage: push-commit
  dependencies:
    - build-prod-frontend
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load -i tmp_docker_images/frontend.tar
    - cd frontend
  script:
    - docker tag $DOCKER_IMAGE_FRONTEND "$CI_REGISTRY"/"$CI_PROJECT_PATH"/frontend:$CI_COMMIT_SHA
    - docker push "$CI_REGISTRY"/"$CI_PROJECT_PATH"/frontend:$CI_COMMIT_SHA
  only:
    - develop
    - master

tag-frontend-branch:
  stage: push-branch
  dependencies:
    - build-prod-frontend
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load -i tmp_docker_images/frontend.tar
    - cd frontend
  script:
    - docker tag $DOCKER_IMAGE_FRONTEND "$CI_REGISTRY"/"$CI_PROJECT_PATH"/frontend:$CI_COMMIT_REF_NAME
    - docker push "$CI_REGISTRY"/"$CI_PROJECT_PATH"/frontend:$CI_COMMIT_REF_NAME
  only:
    - develop
    - master

## Programaker Frontend
build-programaker-frontend:
  stage: build
  before_script:
    - mkdir -p tmp_docker_images/ || true
    - cd frontend
  artifacts:
    paths:
      - tmp_docker_images/
    expire_in: 24h # No need to keep it around
  script:
    - docker build --build-arg BUILD_COMMAND=build-programaker -t $DOCKER_IMAGE_FRONTEND  -f scripts/ci-partial.dockerfile .
    - docker save $DOCKER_IMAGE_FRONTEND -o ../tmp_docker_images/programaker-frontend.tar

push-programaker-frontend:
  stage: push-commit
  dependencies:
    - build-programaker-frontend
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load -i tmp_docker_images/programaker-frontend.tar
    - cd frontend
  script:
    - docker tag $DOCKER_IMAGE_FRONTEND "$CI_REGISTRY"/"$CI_PROJECT_PATH"/programaker-frontend:$CI_COMMIT_SHA
    - docker push "$CI_REGISTRY"/"$CI_PROJECT_PATH"/programaker-frontend:$CI_COMMIT_SHA
  only:
    - develop
    - master

tag-programaker-frontend-branch:
  stage: push-branch
  dependencies:
    - build-programaker-frontend
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load -i tmp_docker_images/programaker-frontend.tar
    - cd frontend
  script:
    - docker tag $DOCKER_IMAGE_FRONTEND "$CI_REGISTRY"/"$CI_PROJECT_PATH"/programaker-frontend:$CI_COMMIT_REF_NAME
    - docker push "$CI_REGISTRY"/"$CI_PROJECT_PATH"/programaker-frontend:$CI_COMMIT_REF_NAME
  only:
    - develop
    - master

## Backend
test-backend:
  stage: test
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd backend
  script:
    - docker build -t $DOCKER_IMAGE_BACKEND -f scripts/ci-partial.dockerfile .
    - docker run -t --rm $DOCKER_IMAGE_BACKEND rebar3 eunit

dialyze-backend:
  stage: test
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - cd backend
  script:
    - docker build -t $DOCKER_IMAGE_BACKEND -f scripts/ci-partial.dockerfile .
    - docker run -t --rm $DOCKER_IMAGE_BACKEND rebar3 dialyzer

build-backend:
  stage: build
  artifacts:
    paths:
      - tmp_docker_images_optimized/
    expire_in: 24h # No need to keep it around
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - mkdir -p tmp_docker_images_optimized/ || true
    - cd backend
  script:
    - docker build -t $DOCKER_IMAGE_BACKEND -f scripts/ci-partial.dockerfile .
    - sh ../utils/ci-preparations/optimize-backend-image.sh $DOCKER_IMAGE_BACKEND $DOCKER_IMAGE_BACKEND_OPTIMIZED
    # Run sanity check
    - docker run -t --rm $DOCKER_IMAGE_BACKEND_OPTIMIZED /app/release/bin/automate escript ../scripts/sanity_check.erl
    - docker save $DOCKER_IMAGE_BACKEND_OPTIMIZED -o ../tmp_docker_images_optimized/backend-optimized.tar

push-backend:
  stage: push-commit
  dependencies:
    - build-backend
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load -i tmp_docker_images_optimized/backend-optimized.tar
    - cd backend
  script:
    - docker tag $DOCKER_IMAGE_BACKEND_OPTIMIZED "$CI_REGISTRY"/"$CI_PROJECT_PATH"/backend:$CI_COMMIT_SHA
    - docker push "$CI_REGISTRY"/"$CI_PROJECT_PATH"/backend:$CI_COMMIT_SHA
  only:
    - develop
    - master

tag-backend-branch:
  stage: push-branch
  dependencies:
    - build-backend
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load -i tmp_docker_images_optimized/backend-optimized.tar
    - cd backend
  script:
    - docker tag $DOCKER_IMAGE_BACKEND_OPTIMIZED "$CI_REGISTRY"/"$CI_PROJECT_PATH"/backend:$CI_COMMIT_REF_NAME
    - docker push "$CI_REGISTRY"/"$CI_PROJECT_PATH"/backend:$CI_COMMIT_REF_NAME
  only:
    - develop
    - master
